.define IEnumerable<dynamic> HttpRequests() _
{ _
  return from hc in ObjectsOfType("System.Web.HttpContext") _
         let elapsed = DateTime.Now - new DateTime((long)hc._timeoutStartTimeUtcTicks) _
         select new { _
           hc.__Address, _
           Method = hc._request._httpMethod, _
           Code = hc._response._statusCode, _
           Elapsed = ((bool)hc._response._completed || (bool)hc._finishPipelineRequestCalled) ? "Finished" : elapsed.ToString() , _
           Timeout = new TimeSpan((long)hc._timeoutTicks).ToString(), _
           VirtualPath = hc._request._filePath._virtualPath, _
           Thread = hc._thread.m_ManagedThreadId _
         }; _
}

.newalias detailedhttprequests !hq json from hr in HttpRequests() _
where !hr.Thread.IsNull() _
let thread = GetRuntime().Threads.SingleOrDefault(t => t.ManagedThreadId == (int)hr.Thread) _
select new { Request = hr, StackTrace = String.Join(Environment.NewLine + "\t\t", thread.StackTrace.Select(f => f.DisplayString)) }

.newalias httprequests !hq tabular HttpRequests()

# This is an example of a helper function that you can use in all subsequent queries
.define IEnumerable<dynamic> NonEmptyXmlSections() _
{ _
  return ObjectsOfType("System.Configuration.SectionXmlInfo").Where(s => !s._rawXml.IsNull()); _
}

.newalias configs !hq json from s in NonEmptyXmlSections() _
where !s._rawXml.IsNull() select new { _
  Key = s._configKey, ConfigPath = s._definitionConfigPath, _
  File = s._filename, Line = s._lineNumber, Xml = s._rawXml _
}

.newalias httpruntimes !hq json from o in ObjectsOfType("System.Web.HttpRuntime") _
where !(bool)o._beforeFirstRequest select new { _
  Address = o.__Address, _
  FirstRequestTime = o._firstRequestStartTime.dateData, _
  UserId = o._wpUserId, _
  DebuggingEnabled = o._debuggingEnabled, _
  ActiveRequestCount = o._activeRequestCount, _
  Path = o._appDomainAppPath _
}

.newalias httprequest !hq json from hr in ObjectEn(0x$1) _
select new { _
  Request = hr._httpMethod + " " + hr._url.m_String, _
  ContentType = hr._contentType, _
  ContentLength = hr._contentLength, _
  Target = hr._path._virtualPath, _
  Response = hr._context._response, _
}

.define ulong ObjSize(ulong address) _
{ _
  return (ulong)SubgraphOf(address).Sum(o => (long)o.__Size); _
}